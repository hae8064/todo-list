{"version":3,"sources":["components/Template.js","components/TodoInsert.js","components/TodoItem.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Template","children","todoLength","className","TodoInsert","onInsertToggle","onInsertTodo","selectedTodo","onRemove","onUpdate","useState","value","setValue","useEffect","text","onClick","onSubmit","id","e","preventDefault","placeholder","onChange","target","type","TodoItem","todo","onCheckToggle","onChangeSelectedTodo","checked","TodoList","todos","map","nextId","App","setSelectedTodo","insertToggle","setInsertToggle","setTodos","prev","length","alert","concat","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff1415bc.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Template.css\";\r\n\r\nconst Template = ({children, todoLength}) => {\r\n    return (\r\n        <div className = \"Template\">\r\n            <div className = \" title\">오늘의 할 일 ({todoLength})</div>\r\n            <div>{children}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Template;","import React, { useEffect, useState } from 'react';\r\nimport { MdAddCircle } from 'react-icons/md';\r\nimport{TiTrash, TiPencil} from \"react-icons/ti\";\r\nimport './TodoInsert.css';\r\n\r\nconst TodoInsert = ({onInsertToggle, onInsertTodo, selectedTodo, onRemove, onUpdate}) => {\r\n    const [value, setValue] = useState(\"\");\r\n\r\n    const onChnage = (e) => {\r\n        setValue(e.target.value)\r\n    };\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        onInsertTodo(value);\r\n        setValue(\"\");\r\n        onInsertToggle();\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(selectedTodo){\r\n            setValue(selectedTodo.text);\r\n        }\r\n    }, [selectedTodo]);\r\n    \r\n    return(\r\n        <div>\r\n            <div className = \"background\" onClick = {onInsertToggle}></div>\r\n            <form onSubmit = {selectedTodo? () => {onUpdate(selectedTodo.id, value)} : onSubmit}>                <input placeholder = \"please type\" value = {value} onChange = {onChnage}></input>\r\n                {selectedTodo ? (\r\n                    <div className = \"rewrite\">\r\n                        <TiPencil onClick = {() => {onUpdate(selectedTodo.id, value)}}/>\r\n                        <TiTrash onClick = {() => {onRemove(selectedTodo.id);\r\n                        }}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                <button type = \"submit\">\r\n                    <MdAddCircle/>\r\n                </button>\r\n               )}\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoInsert;","import React from 'react';\r\nimport {MdCheckBox, MdCheckBoxOutlineBlank} from 'react-icons/md';\r\nimport \"./TodoItem.css\";\r\n\r\nconst TodoItem = ({todo, onCheckToggle, onInsertToggle, onChangeSelectedTodo}) => {\r\n    const {id, text, checked} = todo;\r\n\r\n    return (\r\n    <div className = \"TodoItem\">\r\n        <div className = {`content ${checked ? \"checked\" : \"\"}`}>\r\n            {checked ? (\r\n                <MdCheckBox\r\n                 onClick = {() => {\r\n                onCheckToggle(id);\r\n                    }}\r\n                />\r\n            ) : (\r\n             <MdCheckBoxOutlineBlank\r\n                onClick = {() => {\r\n                    onCheckToggle(id);\r\n                }}\r\n             />\r\n            )}\r\n            <div className = \"text\" onClick = {() => {\r\n                onChangeSelectedTodo(todo);\r\n                onInsertToggle();\r\n            }}>{text}</div>\r\n        </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport \"./TodoList.css\";\r\n\r\nconst TodoList = ({todos, onCheckToggle, onInsertToggle, onChangeSelectedTodo}) => {\r\n    return (\r\n        <div className = \"TodoList\">\r\n            {todos.map(todo => (\r\n            <TodoItem \r\n            todo = {todo} \r\n            key = {todo.id} \r\n            onCheckToggle={onCheckToggle} \r\n            onInsertToggle = {onInsertToggle}\r\n            onChangeSelectedTodo = {onChangeSelectedTodo}\r\n            />\r\n            ))}\r\n        </div>\r\n        );\r\n};\r\n\r\nexport default TodoList;"," import React from 'react';\n//useState를 {}묶어줘야함 아니면 에러뜸\n//구체적인 모듈을 import하기위해서는 {} 묶어줘야함\nimport {useState} from 'react';\nimport { MdAddCircle } from 'react-icons/md';\nimport './App.css';\nimport Template from './components/Template';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\n//계속 증가시키기위해서 함수를 여기다가 작성\nlet nextId = 4;\n\nconst App = () => {\n  const [selectedTodo, setSelectedTodo] = useState(null);\n  const [insertToggle, setInsertToggle] = useState(false);\n  const [todos, setTodos] = useState([\n    {\n      id: 1,\n      text: \"할일 1\",\n      checked: true\n    },\n    {\n      id: 2,\n      text: \"할일 2\",\n      checked: false\n    },\n    {\n      id: 3,\n      text: \"할일 3\",\n      checked: true\n    }\n  ]);\n\n  const onInsertToggle = () => {\n    if(selectedTodo){\n      setSelectedTodo(null);\n    }\n\n    setInsertToggle(prev => !prev)\n  }\n\n  const onInsertTodo = (text) => {\n    //만약 텍스트가 빈문자열이라면\n    if(text === \"\"){\n      return alert(\"할 일을 입력해주세요\")\n    }\n    else{\n      const todo = {\n        id: nextId,\n        text,\n        checked: false\n      }\n      setTodos(todos => todos.concat(todo));\n      nextId++;\n    }\n  }\n\n  const onCheckToggle = (id) => {\n    setTodos(todos => todos.map(todo => (todo.id === id ? {...todo, checked: !todo.checked} : todo)\n      )\n    );\n  };\n\n  const onChangeSelectedTodo = (todo) => {\n    setSelectedTodo(todo)\n  }\n\n  const onRemove = id => {\n    onInsertToggle();\n    setTodos(todos => todos.filter(todo => todo.id !== id))\n  };\n\n  const onUpdate = (id, text) => {\n    onInsertToggle();\n    setTodos(todos => todos.map(todo => (todo.id === id ? {...todo, text} : todo))\n    );\n  };\n\n  //concat함수란: 새 배열이 리턴이 되고, 기존 배열은 변경이 되지않는다.\n  return (\n    <Template todoLength = {todos.length}>\n      <TodoList \n      todos = {todos} \n      onCheckToggle = {onCheckToggle} \n      onInsertToggle = {onInsertToggle}\n      onChangeSelectedTodo = {onChangeSelectedTodo}\n      />\n      <div className = \"add-todo-button\" onClick = {onInsertToggle}>\n        <MdAddCircle/>\n      </div>\n      {insertToggle && (<TodoInsert \n      selectedTodo = {selectedTodo}\n      onInsertToggle={onInsertToggle} \n      onInsertTodo = {onInsertTodo}\n      onRemove = {onRemove}\n      onUpdate = {onUpdate}\n      />\n      )}\n    </Template> \n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}